apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ejabberd.fullname" . }}
  labels:
    {{- include "ejabberd.labels" . | nindent 4 }}
data:
  cluster.sh: |
    #!/usr/bin/env sh
    EJABBERDCTL=$HOME/bin/ejabberdctl
    HOSTNAME_S=$(hostname -s) # ejabberd-0
    HOSTNAME_F=$(hostname -f) # ejabberd-0.ejabberd.default.svc.cluster.local
    SERVICE="ejabberd.{{ .Release.Namespace }}.svc.cluster.local" # ejabberd.default.svc.cluster.local
    export ERLANG_NODE_ARG="ejabberd@$HOSTNAME_F" # ejabberd@ejabberd-0.ejabberd.default.svc.cluster.local
    ERLANG_NODE=$ERLANG_NODE_ARG
    MAIN="ejabberd-0"
    while true
    do
      if [[ "$HOSTNAME_S" == "$MAIN" ]] ; then
          echo "main node, skipping clustering"
          break
      fi
      $EJABBERDCTL start
      $EJABBERDCTL started
      echo "trying to connect to node with hostname $MAIN.$SERVICE"
      $EJABBERDCTL join_cluster "ejabberd@$MAIN.$SERVICE"
      CLUSTERING_RESULT=$?
      if [[ $CLUSTERING_RESULT -eq 0 ]] ; then
          echo "successfully joined";
          $EJABBERDCTL list_cluster
      else
          echo "failed to join, trying again";
      fi
      $EJABBERDCTL stop
      $EJABBERDCTL stopped
      if [[ $CLUSTERING_RESULT -eq 0 ]] ; then
        break
      fi
    done
    # Define cleanup procedure
    cleanup() {
        echo "Container stopped, performing cleanup..."
        $EJABBERDCTL leave_cluster "$ERLANG_NODE_ARG"
    }
    # Trap SIGTERM
    trap 'cleanup' SIGTERM
    echo "launching in foreground"
    $EJABBERDCTL foreground &
    # Wait
    wait $!
  ejabberd.yml: |
    hosts:
      - {{ .Values.environment.domain }}
    loglevel: 4
    log_rotate_size: 10485760
    log_rotate_count: 1
    certfiles:
      - /home/ejabberd/conf/server.pem
    ca_file: "/home/ejabberd/conf/cacert.pem"
    listen:
      -
        port: 5222
        ip: "::"
        module: ejabberd_c2s
        max_stanza_size: 262144
        shaper: c2s_shaper
        access: c2s
        starttls_required: true
      -
        port: 5269
        ip: "::"
        module: ejabberd_s2s_in
        max_stanza_size: 524288
      -
        port: 5443
        ip: "::"
        module: ejabberd_http
        tls: true
        request_handlers:
          "/admin": ejabberd_web_admin
          "/api": mod_http_api
          "/bosh": mod_bosh
          "/captcha": ejabberd_captcha
          "/upload": mod_http_upload
          "/ws": ejabberd_http_ws
          "/oauth": ejabberd_oauth
      -
        port: 5280
        ip: "::"
        module: ejabberd_http
        request_handlers:
          "/admin": ejabberd_web_admin
          "/api": mod_http_api
          "/bosh": mod_bosh
          "/captcha": ejabberd_captcha
          "/upload": mod_http_upload
          "/ws": ejabberd_http_ws
          "/oauth": ejabberd_oauth
      -
        port: 1883
        ip: "::"
        module: mod_mqtt
        backlog: 1000
    s2s_use_starttls: optional
    acl:
      local:
        user_regexp: ""
      loopback:
        ip:
          - 127.0.0.0/8
          - ::1/128
          - ::FFFF:127.0.0.1/128
      admin:
        user:
          - "admin@{{ .Values.environment.domain }}"
    access_rules:
      jwt_only:
        deny: admin
        allow: all
      local:
        allow: local
      c2s:
        deny: blocked
        allow: all
      announce:
        allow: admin
      configure:
        allow: admin
      muc_create:
        allow: local
      pubsub_createnode:
        allow: local
      trusted_network:
        allow: loopback
    api_permissions:
      "console commands":
        from:
          - ejabberd_ctl
        who: all
        what: "*"
      "admin access":
        who:
          access:
            allow:
              acl: loopback
              acl: admin
          oauth:
            scope: "ejabberd:admin"
            access:
              allow:
                acl: loopback
                acl: admin
        what:
          - "*"
          - "!stop"
          - "!start"
      "public commands":
        who:
          ip: 127.0.0.1/8
        what:
          - status
          - connected_users_number
    shaper:
      normal: 1000
      fast: 50000
    shaper_rules:
      max_user_sessions: 10
      max_user_offline_messages:
        5000: admin
        100: all
      c2s_shaper:
        none: admin
        normal: all
      s2s_shaper: fast
    max_fsm_queue: 10000
    acme:
       contact: "mailto:example-admin@example.com"
       ca_url: "https://acme-staging-v02.api.letsencrypt.org/directory"
    modules:
      mod_adhoc: {}
      mod_admin_extra: {}
      mod_announce:
        access: announce
      mod_avatar: {}
      mod_blocking: {}
      mod_bosh: {}
      mod_caps: {}
      mod_carboncopy: {}
      mod_client_state: {}
      mod_configure: {}
      mod_disco: {}
      mod_fail2ban: {}
      mod_http_api: {}
      mod_http_upload:
        put_url: https://@HOST@:5443/upload
      mod_last: {}
      mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        {{- if not .Values.postgresql.enabled }}
        ## db_type: sql
        {{- else }}
        db_type: sql
        {{- end }}
        assume_mam_usage: true
        default: never
      mod_mqtt: {}
      mod_muc:
        access:
          - allow
        access_admin:
          - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
          - allow
        default_room_options:
          allow_subscription: true  # enable MucSub
          mam: false
      mod_muc_admin: {}
      mod_offline:
        access_max_user_messages: max_user_offline_messages
      mod_ping: {}
      mod_privacy: {}
      mod_private: {}
      mod_proxy65:
        access: local
        max_connections: 5
      mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
          - flat
          - pep
        force_node_config:
          ## Avoid buggy clients to make their bookmarks public
          storage:bookmarks:
            access_model: whitelist
      mod_push: {}
      mod_push_keepalive: {}
      mod_register:
        ## Only accept registration requests from the "trusted"
        ## network (see access_rules section above).
        ## Think twice before enabling registration from any
        ## address. See the Jabber SPAM Manifesto for details:
        ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
        ip_access: trusted_network
      mod_roster:
        versioning: true
      mod_sip: {}
      mod_s2s_dialback: {}
      mod_shared_roster: {}
      mod_stream_mgmt:
        resend_on_timeout: if_offline
      mod_vcard: {}
      mod_vcard_xupdate: {}
      mod_version:
        show_os: false
    {{- if .Values.postgresql.enabled }}
    new_sql_schema: true
    sql_type: pgsql
    sql_server: {{ .Values.postgresql.fullnameOverride }}
    sql_database: {{ .Values.postgresql.auth.database }}
    sql_username: {{ .Values.postgresql.auth.username }}
    sql_password: {{ .Values.postgresql.auth.password }}
    auth_password_format: scram
    default_db: sql
    {{- end }}
    auth_method: [jwt{{- if .Values.postgresql.enabled -}}, sql{{- end -}}]
    jwt_jid_field: "actor"
    jwt_auth_only_rule: jwt_only
    jwt_key: /home/ejabberd/conf/jwt.key
  jwt.key: |
    {
      "kty": "oct",
      "use": "sig",
      "kid": {{ .Values.jwt.kid }},
      "k": {{ .Values.jwt.k }},
      "alg": "HS256"
    }
